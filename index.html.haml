!!!
/
  slidedeck: A modification of the Google IO 2012 HTML5 slide template
  URL: https://github.com/rmcgibbo/slidedeck
  
  Based on https://github.com/francescolaffi/elastic-google-io-slides, and
  ultimately:
  
  Google IO 2012 HTML5 Slide Template
  Authors: Eric Bidelman <ebidel@gmail.com>
  Luke Mahe <lukem@google.com>
  URL: https://code.google.com/p/io-2012-slides
%html
  %head
    %title An Introduction to Computer Vision
    %meta{charset: "utf-8"}
    %meta{content: "chrome=1", "http-equiv" => "X-UA-Compatible"}
    / <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0">
    / <meta name="viewport" content="width=device-width, initial-scale=1.0">
    / This one seems to work all the time, but really small on ipad
    / <meta name="viewport" content="initial-scale=0.4">
    %meta{content: "yes", name: "apple-mobile-web-app-capable"}
    %link{href: " http://www.stanford.edu/favicon.ico", rel: "shortcut icon"}
    %link{href: "theme/css/default.css", media: "all", rel: "stylesheet"}
    %link{href: "theme/css/custom.css", media: "all", rel: "stylesheet"}
    %link{href: "theme/css/phone.css", media: "only screen and (max-device-width: 480px)", rel: "stylesheet"}
    %base{target: "_blank"}
    / This amazingness opens all links in a new tab.
    %script{"data-main" => "js/slides", src: "js/require-1.0.8.min.js"}
    / MathJax support
    %script{type: "text/x-mathjax-config"}
      MathJax.Hub.Config({
      extensions: ["tex2jax.js"],
      jax: ["input/TeX", "output/HTML-CSS"],
      showProcessingMessages: false,
      tex2jax: {
      inlineMath: [ ['$','$'], ["\\(","\\)"] ],
      displayMath: [ ['$$','$$'], ["\\[","\\]"] ],
      processEscapes: true
      },
      "HTML-CSS": { availableFonts: ["TeX"] }
      });
    %script{src: "http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"}
  %body{style: "opacity: 0"}
    %slides.layout-widescreen
      %slide.title-slide.segue
        %hgroup
          %h1{data:{'config-title' => ''}} A Guide to Computer Vision
          %h2{data:{'config-subtitle' => ''}} &hellip; and its applications in traffic analysis
          %p{data:{'config-presenter' => ''}} Rich Wareham, University of Cambridge
      %slide.nobackground
        %hgroup
          %h2 The Aim of this Talk
        %aside.note
          %section
            %p An overview and motivating examples, not an undergraduate
            lecture. What tools do we use? Give some brief insight into what I
            plan to do on the computer vision side of my project.
      %slide.segue.dark.nobackground
        %hgroup
          %h2 The Basics
      %slide.nobackground
        %hgroup
          %h2 The basic idea
        %article
          %p FIXME: diagram of human vision/artistry
      %slide.nobackground
        %hgroup
          %h2 The basic idea
        %article
          %p FIXME: diagram of computer vision/rendering
      %slide.nobackground
        %hgroup
          %h2 The Basics
        %aside.note
          %section
            %p Some basic terminology:
            %ul
              %li
                %b Image
                Rectangular array of pixels index with an $x$ and $y$ co-ordinate
              %li
                %b Pixel
                One or move values associated with an image location
              %li
                %b Filter
                A process which transforms pixel values in images
      %slide{style: "background-image: url(figures/vision-pipeline.png); background-size: contain; background-repeat: no-repeat; background-position: center;"}
      %slide.nobackground
        %hgroup
          %h2 Filters
        %article
          %p Pixel-to-pixel transform
          %p Example: image gradent
        %aside.note
          %section
            %p Draw example
      %slide.nobackground
        %hgroup
          %h2 Detector
        %article
          %p Pixel-to-shape transform
          %p Example: contour finding
        %aside.note
          %section
            %p make sure to note problems with inner contours
      %slide.nobackground
        %hgroup
          %h2 Template Matching
          %h3 Example: shape matching
        %aside.note
          %section
            %p Draw example A vs V
      %slide
        %hgroup
          %h2 The Tools
        %article
          %ul
            %li
              %a{href:"http://opencv.org/"} OpenCV
              &mdash; Turn-key implementations of most `standard' algorithms
            %li
              %a{href:"http://python.org/"} Python
              &mdash; The universal `glue' language
            %li
              %a{href:"http://ipython.org/"} IPython web notebook
              &mdash; A scientist-friendly interface to Python
            %li
              %a{href:"http://www.numpy.org/"} NumPy/SciPy
              &mdash; Number-crunching library for Python
      %slide
        %hgroup
          %h2 IPython demo
        %aside.note
          %section
            %p Load from URL, convert to greyscale, DoG edge detector
      %slide.segue.dark.nobackground
        %hgroup
          %h2 Example: ANPR
          %h3 Automatic Number Plate Recognition
      %slide{style: "background-image: url(figures/number-plate-input.jpg); background-size: contain; background-repeat: no-repeat; background-position: center;"}
        %article.build
          %pre.prettyprint{"data-lang" => "python"}
            :preserve
              import cv2

              im = cv2imread('number-plate.jpg')
      %slide{style: "background-image: url(figures/number-plate-1-colour-difference.png); background-size: contain; background-repeat: no-repeat; background-position: center;"}
        %article.build
          %pre.prettyprint.tobuild{"data-lang" => "python"}
            :preserve
              import numpy as np

              # Create an entirely yellow image
              yellow = np.ones(im.shape)
              yellow[:,:,0] = 209     # red
              yellow[:,:,1] = 169     # green
              yellow[:,:,2] = 11      # blue          

              # Compute difference
              diff = np.abs(yellow - im)
      %slide{style: "background-image: url(figures/number-plate-2-desaturate.png); background-size: contain; background-repeat: no-repeat; background-position: center;"}
        %article.build
          %pre.prettyprint.tobuild{"data-lang" => "python"}
            :preserve
              # Destaurate by taking the mean of each colour
              desat = np.mean(diff, axis=2)
      %slide{style: "background-image: url(figures/number-plate-3-invert.png); background-size: contain; background-repeat: no-repeat; background-position: center;"}
        %article.build
          %pre.prettyprint.tobuild{"data-lang" => "python"}
            :preserve
              desat_inv = 255 - desat
      %slide{style: "background-image: url(figures/number-plate-4-threshold.png); background-size: contain; background-repeat: no-repeat; background-position: center;"}
        %article.build
          %pre.prettyprint.tobuild{"data-lang" => "python"}
            :preserve
              desat_thresh = np.where(desat_inv > 200), 1, 0)
      %slide{style: "background-image: url(figures/number-plate-5-quad-fit.png); background-size: contain; background-repeat: no-repeat; background-position: center;"}
        %article.build
          / %iframe{src: "http://opencv-code.com/tutorials/automatic-perspective-correction-for-quadrilateral-objects/"}
          / %iframe{src: "http://jsfiddle.net/rjw57/A6Pgy/embedded/result,js,html,css/"}
          /%p
          /  See
          /  %a{href: "https://www.youtube.com/ytvO2dijZ7A"}
          /    demo video on YouTube.
      %slide{style: "background-image: url(figures/number-plate-6-warp.png); background-size: contain; background-repeat: no-repeat; background-position: center;"}
      %slide{style: "background-image: url(figures/number-plate-7-crop-invert.png); background-size: contain; background-repeat: no-repeat; background-position: center;"}
      %slide{style: "background-image: url(figures/number-plate-8-erode.png); background-size: contain; background-repeat: no-repeat; background-position: center;"}
        %article.build
          %pre.prettyprint.tobuild{"data-lang" => "python"}
            :preserve
              eroded = cv2.erode(cropped)
      %slide{style: "background-image: url(figures/number-plate-9-connected-segments.png); background-size: contain; background-repeat: no-repeat; background-position: center;"}
        %article.build
          %pre.prettyprint.tobuild{"data-lang" => "python"}
            :preserve
              # Extract connected regions as vector contours
              segment_contours = cv2.findContours(
                eroded, cv2.RETR_CCOMP, cv2.CHAIN_APPROX_SIMPLE
              )
      %slide{style: "background-image: url(figures/number-plate-10-model.png); background-size: contain; background-repeat: no-repeat; background-position: center;"}
      %slide
        %hgroup
          %h2 Aside: Dutch number plate
        %article.build
          %p.centered
            %img{src:'figures/Dutch_license_plate_segment.jpg', width:'60%'}
      %slide.segue.dark.nobackground
        %hgroup
          %h2 Feature detection
          %h3 Fourier transform, wavelets and complex numbers, oh my!
      %slide
        %hgroup
          %h2 Convolution
        %article
          %p.centered
            %img{src:'figures/Convolution_of_spiky_function_with_box2.gif', width:'80%'}
          %p.centered
            %img{src:'figures/Convolution_of_box_signal_with_itself2.gif', width:'80%'}
      %slide
        %hgroup
          %h2 Fourier Transform
        %article
          %p.centered
            %img{src:'figures/Fourier_transform_time_and_frequency_domains.gif', width:'60%'}
        %aside.note
          %section
            %p Outline FT. On tablet draw phase shift property. Compare with wavelets.
      %slide{style: "background-image: url(figures/real-vs-complex-wt.png); background-size: contain; background-repeat: no-repeat; background-position: center;"}
      %slide{style: "background-image: url(figures/2d-complex-wt.png); background-size: contain; background-repeat: no-repeat; background-position: center;"}
      %slide
        %hgroup
          %h2 Feature detection in video images
        %aside.note
          %p Video
          %section
            %p Show video
      %slide
        %hgroup
          %h2 Polar matching
        %article
          %p.centered
            %img{src:'figures/polar-matching.png', width:'50%'}
      %slide
        %hgroup
          %h2 Descriptor matching in video
        %aside.note
          %p Video
          %section
            %p Show video
      %slide.segue.dark.nobackground
        %hgroup
          %h2 Perspective warping
          %h3.build
            %span 
              Here comes
              %a{href:'https://www.youtube.com/watch?v=29Im23SPNok'} the science bit,
            %span concentrate!
      %slide
        %hgroup
          %h2 Perspective transformation
          %h3 General case
        %article
          %p Map 3d co-ordinate $[x, y, z]$ to 2d co-ordinate $[X, Y]$
          %p.centered
            :preserve
              $$
              \underbrace{\begin{bmatrix}
              XW \\\\ YW \\\\ W
              \end{bmatrix}}_{3 \times 1}
              =
              \underbrace{P}_{3 \times 4}
              \underbrace{\begin{bmatrix}
              x \\\\ y \\\\ z \\\\ 1
              \end{bmatrix}}_{4 \times 1}
              $$
      %slide
        %hgroup
          %h2 Perspective transformation
          %h3 Planar case
        %article
          %p If source is a plane, without loss of generality we can ignore $z$
          %p.centered
            :preserve
              $$
              \begin{bmatrix}
              XW \\\\ YW \\\\ W
              \end{bmatrix}
              =
              \underbrace{\begin{bmatrix}
              a & d & g \\\\
              b & e & h \\\\
              c & f & 1
              \end{bmatrix}}_{\mbox{8 unknowns}}
              \begin{bmatrix}
              x \\\\ y \\\\ 1
              \end{bmatrix}
              $$
      %slide
        %article
          %p.centered{style:'font-size:70%'}
            :preserve
              $$
              \underbrace{\begin{bmatrix}
              x_1 & 0 & -x_1X_1 & y_1 & 0 & -y_1X_1 & 1 & 0 \\\\
              0 & x_1 & -x_1Y_1 & 0 & y_1 & -y_1Y_1 & 0 & 1 \\\\
              x_2 & 0 & -x_2X_2 & y_2 & 0 & -y_2X_2 & 1 & 0 \\\\
              0 & x_2 & -x_2Y_2 & 0 & y_2 & -y_2Y_2 & 0 & 1 \\\\
              x_3 & 0 & -x_3X_3 & y_3 & 0 & -y_3X_3 & 1 & 0 \\\\
              0 & x_3 & -x_3Y_3 & 0 & y_3 & -y_3Y_3 & 0 & 1 \\\\
              x_4 & 0 & -x_4X_4 & y_4 & 0 & -y_4X_4 & 1 & 0 \\\\
              0 & x_4 & -x_4Y_4 & 0 & y_4 & -y_4Y_4 & 0 & 1 \\\\
              \end{bmatrix}}_{A}
              \underbrace{\begin{bmatrix}
              a\\\\b\\\\c\\\\d\\\\e\\\\f\\\\g\\\\h
              \end{bmatrix}}_{\vec{v}}
              =
              \underbrace{\begin{bmatrix}
              X_1\\\\Y_1\\\\
              X_2\\\\Y_2\\\\
              X_3\\\\Y_3\\\\
              X_4\\\\Y_4
              \end{bmatrix}}_{\vec{u}}
              $$
      %slide
        %hgroup
          %h2 Planar homography
        %article
          %p Find transform coefficients from image co-ordinates and template co-ordinates
          %p $$ \vec{v} = A^{-1} \vec{u} $$
      %slide
        %hgroup
          %h2 Homography: an example
        %article
          %p
            %a{href:'http://jsfiddle.net/rjw57/A6Pgy/'} WebGL perspective transformation
            (JSFiddle)
      %slide
        %hgroup
          %h2 Joining it all together
        %article
          %p
            %a{href:'https://www.youtube.com/watch?v=-ZNYoL8rzPY'} Planar Object Tracking
      %slide.thank-you-slide.segue.nobackground
        / <aside class="gdbar right"><img src="images/google_developers_icon_128.png"></aside>
        %article.flexbox.vleft.auto-fadein
          %h2 Thanks for watching
          %p
            Slides available at
            %a{href:'https://rjw57.github.io/cv-intro'} rjw57.github.io/cv-intro
        %p.auto-fadein{"data-config-contact" => ""}
          %span g+
          %a{href: "http://gplus.to/richwareham"} gplus.to/richwareham
          %br
          %span email
          %span rjw57@cam.ac.uk
          %br
          %span github
          %a{href: "http://github.com/rjw57"} github.com/rjw57
      %slide.backdrop
    /[if IE]
      <script src="http://ajax.googleapis.com/ajax/libs/chrome-frame/1/CFInstall.min.js"></script>
      <script>CFInstall.check({mode: 'overlay'});</script>

/ vim:sw=2:sts=2:et

